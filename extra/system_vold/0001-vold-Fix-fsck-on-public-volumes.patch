From 6a213f591f6889b9190ce8e3b7d8d726e31d8740 Mon Sep 17 00:00:00 2001
From: Michael Bestas <mikeioannina@gmail.com>
Date: Sun, 6 Dec 2015 23:53:55 +0200
Subject: [PATCH 1/7] vold: Fix fsck on public volumes

* Fsck was hitting a neverallow on public volumes not formatted in vfat
  because it was always using the trusted context
* Always run trusted fsck for private volumes and untrusted for public

Change-Id: I0a6ee9aea907bae9ed097b920df0559df7b45d7d
---
 fs/Ext4.cpp             | 5 ++---
 fs/Ext4.h               | 2 +-
 fs/F2fs.cpp             | 5 ++---
 fs/F2fs.h               | 2 +-
 model/PrivateVolume.cpp | 4 ++--
 model/PublicVolume.cpp  | 4 ++--
 6 files changed, 10 insertions(+), 12 deletions(-)

diff --git a/fs/Ext4.cpp b/fs/Ext4.cpp
index 6bc7ad2..e0f89a5 100644
--- a/fs/Ext4.cpp
+++ b/fs/Ext4.cpp
@@ -60,7 +60,7 @@ bool IsSupported() {
            IsFilesystemSupported("ext4");
 }
 
-status_t Check(const std::string& source, const std::string& target) {
+status_t Check(const std::string& source, const std::string& target, bool trusted) {
     // The following is shamelessly borrowed from fs_mgr.c, so it should be
     // kept in sync with any changes over there.
 
@@ -116,8 +116,7 @@ status_t Check(const std::string& source, const std::string& target) {
         cmd.push_back("-y");
         cmd.push_back(c_source);
 
-        // ext4 devices are currently always trusted
-        return ForkExecvp(cmd, nullptr, sFsckContext);
+        return ForkExecvp(cmd, nullptr, trusted ? sFsckContext : sFsckUntrustedContext);
     }
 
     return 0;
diff --git a/fs/Ext4.h b/fs/Ext4.h
index 329f302..b458439 100644
--- a/fs/Ext4.h
+++ b/fs/Ext4.h
@@ -27,7 +27,7 @@ namespace ext4 {
 
 bool IsSupported();
 
-status_t Check(const std::string& source, const std::string& target);
+status_t Check(const std::string& source, const std::string& target, bool trusted);
 status_t Mount(const std::string& source, const std::string& target, bool ro, bool remount,
                bool executable);
 status_t Format(const std::string& source, unsigned long numSectors, const std::string& target);
diff --git a/fs/F2fs.cpp b/fs/F2fs.cpp
index f4a81ee..c3fa825 100644
--- a/fs/F2fs.cpp
+++ b/fs/F2fs.cpp
@@ -42,14 +42,13 @@ bool IsSupported() {
            IsFilesystemSupported("f2fs");
 }
 
-status_t Check(const std::string& source) {
+status_t Check(const std::string& source, bool trusted) {
     std::vector<std::string> cmd;
     cmd.push_back(kFsckPath);
     cmd.push_back("-a");
     cmd.push_back(source);
 
-    // f2fs devices are currently always trusted
-    return ForkExecvp(cmd, nullptr, sFsckContext);
+    return ForkExecvp(cmd, nullptr, trusted ? sFsckContext : sFsckUntrustedContext);
 }
 
 status_t Mount(const std::string& source, const std::string& target) {
diff --git a/fs/F2fs.h b/fs/F2fs.h
index f710212..eb34afa 100644
--- a/fs/F2fs.h
+++ b/fs/F2fs.h
@@ -27,7 +27,7 @@ namespace f2fs {
 
 bool IsSupported();
 
-status_t Check(const std::string& source);
+status_t Check(const std::string& source, bool trusted);
 status_t Mount(const std::string& source, const std::string& target);
 status_t Format(const std::string& source);
 
diff --git a/model/PrivateVolume.cpp b/model/PrivateVolume.cpp
index 1875b7b..188c711 100644
--- a/model/PrivateVolume.cpp
+++ b/model/PrivateVolume.cpp
@@ -132,7 +132,7 @@ status_t PrivateVolume::doMount() {
     }
 
     if (mFsType == "ext4") {
-        int res = ext4::Check(mDmDevPath, mPath);
+        int res = ext4::Check(mDmDevPath, mPath, true);
         if (res == 0 || res == 1) {
             LOG(DEBUG) << getId() << " passed filesystem check";
         } else {
@@ -146,7 +146,7 @@ status_t PrivateVolume::doMount() {
         }
 
     } else if (mFsType == "f2fs") {
-        int res = f2fs::Check(mDmDevPath);
+        int res = f2fs::Check(mDmDevPath, true);
         if (res == 0) {
             LOG(DEBUG) << getId() << " passed filesystem check";
         } else {
diff --git a/model/PublicVolume.cpp b/model/PublicVolume.cpp
index af91211..fd4f9b9 100644
--- a/model/PublicVolume.cpp
+++ b/model/PublicVolume.cpp
@@ -137,9 +137,9 @@ status_t PublicVolume::doMount() {
     if (mFsType == "exfat") {
         ret = exfat::Check(mDevPath);
     } else if (mFsType == "ext4") {
-        ret = ext4::Check(mDevPath, mRawPath);
+        ret = ext4::Check(mDevPath, mRawPath, false);
     } else if (mFsType == "f2fs") {
-        ret = f2fs::Check(mDevPath);
+        ret = f2fs::Check(mDevPath, false);
     } else if (mFsType == "ntfs") {
         ret = ntfs::Check(mDevPath);
     } else if (mFsType == "vfat") {
-- 
2.34.1

